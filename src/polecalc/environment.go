package polecalc

import (
	"os"
	"io/ioutil"
	"bytes"
)

type Environment struct {
	// program parameters
	GridLength uint32	// side length of Brillouin zone; typical value ~ 64
	InitD1,			// initial values for self-consistent parameters
	InitMu,
	InitF0	float64

	// physical parameters: system constants
	Alpha int8	// either -1 (d-wave) or +1 (s-wave)
	T0,		// Overall energy scale (default = 1.0)
	Tz,		// z-direction hopping energy (|tz| < 0.3 or so)
	Thp,		// Diagonal (next-nearest-neighbor) hopping energy (similar range as tz)
	X,		// Doping / holon excess (0 < x < ~0.2)
	Th float64	// One-holon hopping energy: th = t0 * (1 - x)

	// self-consistently determined physical parameters
	D1,		// diagonal hopping parameter generated by two-hole process
	Mu,		// holon chemical potential
	F0 float64	// superconducting order parameter
}

// Construct an Environment from the JSON file with given path
func EnvironmentFromFile(filePath string) *Environment, os.Error {
	fileContents, err := ioutil.ReadFile(filePath)
	if err != nil {
		return nil, err
	}
	jsonString := bytes.NewBuffer(fileContents).String()
	return EnvironmentFromString(jsonString)
}

// Construct an Environment from the given JSON string
func EnvironmentFromString(jsonString string) *Environment, os.Error {
	// is there a way to implement this without manually specifying parameter names?
	// maybe use reflect package?
}

// Write the Environment to a JSON file at the given path
func (env *Environment) WriteToFile(filePath string) os.Error {
	if err := WriteToJSONFile(env, filePath); err != nil {
		return err
	}
	return nil
}
